"""
/********************************************************************************
* Copyright (c) 2023 the Qrisp authors
*
* This program and the accompanying materials are made available under the
* terms of the Eclipse Public License 2.0 which is available at
* http://www.eclipse.org/legal/epl-2.0.
*
* This Source Code may also be made available under the following Secondary
* Licenses when the conditions for such availability set forth in the Eclipse
* Public License, v. 2.0 are satisfied: GNU General Public License, version 2 
* or later with the GNU Classpath Exception which is
* available at https://www.gnu.org/software/classpath/license.html.
*
* SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-or-later WITH Classpath-exception-2.0
********************************************************************************/
"""

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.clbit import Clbit
from openapi_server.models.instruction import Instruction
from openapi_server.models.qubit import Qubit
from openapi_server import util

from openapi_server.models.clbit import Clbit  # noqa: E501
from openapi_server.models.instruction import Instruction  # noqa: E501
from openapi_server.models.qubit import Qubit  # noqa: E501

class QuantumCircuit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, qubits=None, clbits=None, data=None):  # noqa: E501
        """QuantumCircuit - a model defined in OpenAPI

        :param qubits: The qubits of this QuantumCircuit.  # noqa: E501
        :type qubits: List[Qubit]
        :param clbits: The clbits of this QuantumCircuit.  # noqa: E501
        :type clbits: List[Clbit]
        :param data: The data of this QuantumCircuit.  # noqa: E501
        :type data: List[Instruction]
        """
        self.openapi_types = {
            'qubits': List[Qubit],
            'clbits': List[Clbit],
            'data': List[Instruction]
        }

        self.attribute_map = {
            'qubits': 'qubits',
            'clbits': 'clbits',
            'data': 'data'
        }

        self._qubits = qubits
        self._clbits = clbits
        self._data = data

    @classmethod
    def from_dict(cls, dikt) -> 'QuantumCircuit':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The QuantumCircuit of this QuantumCircuit.  # noqa: E501
        :rtype: QuantumCircuit
        """
        return util.deserialize_model(dikt, cls)

    @property
    def qubits(self):
        """Gets the qubits of this QuantumCircuit.


        :return: The qubits of this QuantumCircuit.
        :rtype: List[Qubit]
        """
        return self._qubits

    @qubits.setter
    def qubits(self, qubits):
        """Sets the qubits of this QuantumCircuit.


        :param qubits: The qubits of this QuantumCircuit.
        :type qubits: List[Qubit]
        """

        self._qubits = qubits

    @property
    def clbits(self):
        """Gets the clbits of this QuantumCircuit.


        :return: The clbits of this QuantumCircuit.
        :rtype: List[Clbit]
        """
        return self._clbits

    @clbits.setter
    def clbits(self, clbits):
        """Sets the clbits of this QuantumCircuit.


        :param clbits: The clbits of this QuantumCircuit.
        :type clbits: List[Clbit]
        """

        self._clbits = clbits

    @property
    def data(self):
        """Gets the data of this QuantumCircuit.


        :return: The data of this QuantumCircuit.
        :rtype: List[Instruction]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this QuantumCircuit.


        :param data: The data of this QuantumCircuit.
        :type data: List[Instruction]
        """

        self._data = data
